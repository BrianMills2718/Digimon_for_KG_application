2025-06-02 02:02:11,185 | INFO    | datasets:<module>:54 - PyTorch version 2.6.0 available.
2025-06-02 02:02:11,336 | INFO    | faiss.loader:<module>:125 - Loading faiss with AVX2 support.
2025-06-02 02:02:11,345 | INFO    | faiss.loader:<module>:127 - Successfully loaded faiss with AVX2 support.
2025-06-02 02:02:11,347 | INFO    | faiss:<module>:174 - Failed to load GPU Faiss: name 'GpuIndexIVFFlat' is not defined. Will not load constructor refs for GPU indexes. This is only an error if you're trying to use GPU Faiss.
2025-06-02 02:02:15,323 | INFO    | httpx:_send_single_request:1025 - HTTP Request: GET https://raw.githubusercontent.com/BerriAI/litellm/main/model_prices_and_context_window.json "HTTP/1.1 200 OK"
2025-06-02 02:02:16,525 | INFO    | __main__:test_agent_corpus_to_graph_pipeline:168 - Starting test_agent_corpus_to_graph_pipeline...
2025-06-02 02:02:16.527 | INFO     | Core.Provider.LiteLLMProvider:__init__:45 - LiteLLMProvider initialized for model: openai/o4-mini-2025-04-16
2025-06-02 02:02:16.527 | INFO     | Core.Chunk.ChunkFactory:__init__:76 - ChunkFactory initialized with working_dir: ./results
2025-06-02 02:02:16,527 | INFO    | __main__:test_agent_corpus_to_graph_pipeline:211 - Main test: Initialized shared_graphrag_context_instance with ID: 139970295813504
2025-06-02 02:02:16.528 | INFO     | Core.Provider.LiteLLMProvider:__init__:45 - LiteLLMProvider initialized for model: openai/o4-mini-2025-04-16
2025-06-02 02:02:16.528 | INFO     | Core.AgentBrain.agent_brain:__init__:70 - PlanningAgent initialized with LLM provider for api_type: LLMType.LITELLM, model: openai/o4-mini-2025-04-16
2025-06-02 02:02:16.528 | INFO     | Core.AgentOrchestrator.orchestrator:_register_tools:59 - AgentOrchestrator: Registered 9 tools with Pydantic models: ['Entity.VDBSearch', 'Entity.PPR', 'Relationship.OneHopNeighbors', 'graph.BuildERGraph', 'graph.BuildRKGraph', 'graph.BuildTreeGraph', 'graph.BuildTreeGraphBalanced', 'graph.BuildPassageGraph', 'corpus.PrepareFromDirectory']
2025-06-02 02:02:16,528 | INFO    | __main__:test_agent_corpus_to_graph_pipeline:221 - Patched tool registry with wrappers.
2025-06-02 02:02:16,528 | INFO    | __main__:test_agent_corpus_to_graph_pipeline:253 - Test: Submitting task to agent:
SYSTEM_TASK: Your overall goal is to provide a summary about the causes of the American Revolution based on documents in '/home/brian/digimon/Data/MySampleTexts'. To achieve this: 1. Process the text files from the input directory '/home/brian/digimon/Data/MySampleTexts' to create a corpus. The 'output_directory_path' for this step must be '/home/brian/digimon/results/MyPipelineTestRun'. The 'target_corpus_name' for this step must be 'MyPipelineTestRun'. The named outputs for this step MUST be {'corpus_status': 'status', 'corpus_path': 'corpus_json_path', 'doc_count': 'document_count'}. 2. After the corpus is prepared, build an Entity-Relation Graph (ERGraph). The 'target_dataset_name' for this BuildERGraph step must be 'MyPipelineTestRun'. Set 'force_rebuild' to true. For 'config_overrides', use: 'extract_two_step'=true, 'enable_entity_description'=true, and 'enable_entity_type'=true. The named outputs for this step MUST be {'graph_id_from_build': 'graph_id', 'status_from_build': 'status'}. This maps the tool's output field 'graph_id' to 'graph_id_from_build' in the plan context, and 'status' to 'status_from_build'. 3. Once the graph is built for dataset 'MyPipelineTestRun', perform a VDB search on its entities. The 'vdb_reference_id' for this search must be 'entities_vdb'. Use the query 'causes of the American Revolution'. Retrieve the top 5 most relevant entities. The named outputs for this step MUST be {'vdb_search_results_list': 'similar_entities'}. This maps the tool's output field 'similar_entities' to 'vdb_search_results_list' in the plan context. 4. For the top 3 entities found, find their one-hop neighbors and relationships. The 'graph_reference_id' input for this step must be {'from_step_id': 'step_2_build_er_graph', 'named_output_key': 'graph_id_from_build'}. The 'entity_ids' input for this step must be {'from_step_id': 'step_3_vdb_search', 'named_output_key': 'vdb_search_results_list'}. The named outputs for this step MUST be {'final_neighbor_info': 'one_hop_relationships'}. Finally, use ALL the information retrieved from steps 3 and 4 to generate a concise natural language summary answering the question about the causes of the American Revolution.
2025-06-02 02:02:16.528 | INFO     | Core.AgentBrain.agent_brain:process_query:360 - PlanningAgent: Processing query: SYSTEM_TASK: Your overall goal is to provide a summary about the causes of the American Revolution based on documents in '/home/brian/digimon/Data/MySampleTexts'. To achieve this: 1. Process the text files from the input directory '/home/brian/digimon/Data/MySampleTexts' to create a corpus. The 'output_directory_path' for this step must be '/home/brian/digimon/results/MyPipelineTestRun'. The 'target_corpus_name' for this step must be 'MyPipelineTestRun'. The named outputs for this step MUST be {'corpus_status': 'status', 'corpus_path': 'corpus_json_path', 'doc_count': 'document_count'}. 2. After the corpus is prepared, build an Entity-Relation Graph (ERGraph). The 'target_dataset_name' for this BuildERGraph step must be 'MyPipelineTestRun'. Set 'force_rebuild' to true. For 'config_overrides', use: 'extract_two_step'=true, 'enable_entity_description'=true, and 'enable_entity_type'=true. The named outputs for this step MUST be {'graph_id_from_build': 'graph_id', 'status_from_build': 'status'}. This maps the tool's output field 'graph_id' to 'graph_id_from_build' in the plan context, and 'status' to 'status_from_build'. 3. Once the graph is built for dataset 'MyPipelineTestRun', perform a VDB search on its entities. The 'vdb_reference_id' for this search must be 'entities_vdb'. Use the query 'causes of the American Revolution'. Retrieve the top 5 most relevant entities. The named outputs for this step MUST be {'vdb_search_results_list': 'similar_entities'}. This maps the tool's output field 'similar_entities' to 'vdb_search_results_list' in the plan context. 4. For the top 3 entities found, find their one-hop neighbors and relationships. The 'graph_reference_id' input for this step must be {'from_step_id': 'step_2_build_er_graph', 'named_output_key': 'graph_id_from_build'}. The 'entity_ids' input for this step must be {'from_step_id': 'step_3_vdb_search', 'named_output_key': 'vdb_search_results_list'}. The named outputs for this step MUST be {'final_neighbor_info': 'one_hop_relationships'}. Finally, use ALL the information retrieved from steps 3 and 4 to generate a concise natural language summary answering the question about the causes of the American Revolution.
2025-06-02 02:02:16.528 | INFO     | Core.AgentBrain.agent_brain:_generate_plan_with_llm:199 - PlanningAgent: Sending messages to LLM for ExecutionPlan (approx 19495 chars).
2025-06-02 02:02:16.528 | DEBUG    | Core.Provider.LiteLLMProvider:async_instructor_completion:230 - LiteLLMProvider: Calling instructor_client_async.chat.completions.create with response_model: ExecutionPlan, model: openai/o4-mini-2025-04-16
[92m02:02:16 - LiteLLM:INFO[0m: utils.py:2968 - 
LiteLLM completion() model= o4-mini-2025-04-16; provider = openai
2025-06-02 02:02:16,544 | INFO    | LiteLLM:_check_valid_arg:2968 - 
LiteLLM completion() model= o4-mini-2025-04-16; provider = openai
