[metadata]
name = digimon-graphrag
version = 0.1.0
description = Deep Analysis of Graph-Based Retrieval-Augmented Generation Systems
long_description = file: README.md
long_description_content_type = text/markdown
author = DIGIMON Contributors
license = MIT
python_requires = >=3.10
classifiers =
    Development Status :: 3 - Alpha
    Intended Audience :: Developers
    Intended Audience :: Science/Research
    License :: OSI Approved :: MIT License
    Programming Language :: Python :: 3
    Programming Language :: Python :: 3.10
    Programming Language :: Python :: 3.11
    Topic :: Scientific/Engineering :: Artificial Intelligence

[options]
packages = find:
install_requires =
    -r requirements.txt

[options.packages.find]
include = Core*, Config*, Data*
exclude = tests*, testing*, docs*

[options.extras_require]
dev = 
    pytest>=7.0.0
    pytest-asyncio>=0.21.0
    pytest-cov>=4.0.0
    pytest-timeout>=2.1.0
    pytest-xdist>=3.0.0
    pytest-mock>=3.10.0
    black>=23.0.0
    flake8>=6.0.0
    mypy>=1.0.0
    pre-commit>=3.0.0

[flake8]
max-line-length = 120
exclude = .git,__pycache__,docs/source/conf.py,old,build,dist,venv,env
ignore = E203,E266,E501,W503,F403,F401
max-complexity = 15

[mypy]
python_version = 3.10
warn_return_any = True
warn_unused_configs = True
disallow_untyped_defs = False
disallow_incomplete_defs = False
check_untyped_defs = True
disallow_untyped_decorators = False
no_implicit_optional = True
warn_redundant_casts = True
warn_unused_ignores = True
warn_no_return = True
warn_unreachable = True
strict_equality = True

[tool:pytest]
testpaths = tests
python_files = test_*.py
python_classes = Test*
python_functions = test_*

[coverage:run]
source = Core
omit = 
    */tests/*
    */testing/*
    */__pycache__/*
    */venv/*
    */env/*

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod