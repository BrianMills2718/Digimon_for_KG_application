2025-05-30 21:05:52.449 | INFO     | __main__:<module>:24 - Orchestrator Test: main_config object type: <class 'Option.Config2.Config'>
2025-05-30 21:05:52.450 | INFO     | __main__:<module>:25 - Orchestrator Test: Is main_config an instance of Option.Config2.Config? True
2025-05-30 21:05:52.450 | INFO     | __main__:<module>:26 - Orchestrator Test: Does main_config have 'graph' attribute? True
2025-05-30 21:05:52.450 | INFO     | __main__:<module>:28 - Orchestrator Test: main_config.graph is: extra_fields=None type='er_graph' graph_type='er_graph' extract_two_step=True max_gleaning=1 force=False enable_entity_description=False enable_entity_type=False enable_edge_description=False enable_edge_name=False prior_prob=0.8 enable_edge_keywords=False use_community=False graph_cluster_algorithm='leiden' max_graph_cluster_size=10 graph_cluster_seed=3735928559 summary_max_tokens=500 llm_model_max_token_size=32768 build_tree_from_leaves=False reduction_dimension=5 summarization_length=100 num_layers=10 top_k=5 threshold_cluster_num=5000 start_layer=5 graph_cluster_params=None selection_mode='top_k' max_length_in_cluster=3500 threshold=0.1 cluster_metric='cosine' verbose=False random_seed=224 enforce_sub_communities=False max_size_percentage=0.2 tol=0.0001 max_iter=300 size_of_clusters=10 custom_ontology_path='Config/custom_ontology.json' loaded_custom_ontology=None similarity_threshold=0.8 similarity_top_k=10 similarity_max=1.0
2025-05-30 21:05:52.450 | INFO     | __main__:<module>:29 - Orchestrator Test: Type of main_config.graph: <class 'Config.GraphConfig.GraphConfig'>
2025-05-30 21:05:52.450 | INFO     | __main__:<module>:33 - Orchestrator Test: main_config.graph.type is: er_graph
2025-05-30 21:05:52.450 | INFO     | __main__:main_orchestrator_test:132 - --- Starting Agent Orchestrator Test ---
2025-05-30 21:05:52.450 | INFO     | __main__:setup_graphrag_context_for_orchestrator:46 - Orchestrator Test: Setting up GraphRAGContext...
2025-05-30 21:05:52.450 | INFO     | __main__:setup_graphrag_context_for_orchestrator:50 - Orchestrator Test: Embedding provider type: <class 'llama_index.embeddings.openai.base.OpenAIEmbedding'>
2025-05-30 21:05:52.451 | INFO     | Core.Graph.GraphFactory:get_graph:43 - GraphFactory: Creating graph of type 'er_graph' with kwargs: {'data_path': './results/MySampleTexts/kg_graph', 'storage_type': 'networkx', 'storage_instance': NetworkXStorage(config=None, namespace=<Core.Storage.NameSpace.NameSpace object at 0x7f5e1a583fd0>, name='graph_storage_nx_data.graphml')}
2025-05-30 21:05:52.451 | DEBUG    | Core.Graph.GraphFactory:_create_er_graph:50 - GraphFactory._create_er_graph: full_config type: <class 'Option.Config2.Config'>, constructor_kwargs: {'data_path': './results/MySampleTexts/kg_graph', 'storage_type': 'networkx', 'storage_instance': NetworkXStorage(config=None, namespace=<Core.Storage.NameSpace.NameSpace object at 0x7f5e1a583fd0>, name='graph_storage_nx_data.graphml')}
2025-05-30 21:05:52.451 | INFO     | Core.Graph.BaseGraph:load_persisted_graph:32 - Attempting to load persisted graph via NetworkXStorage.load_graph(force=False)
2025-05-30 21:05:52.451 | INFO     | Core.Storage.NetworkXStorage:load_nx_graph:33 - Attempting to load the graph from: ./results/MySampleTexts/kg_graph/graph_storage_nx_data.graphml
2025-05-30 21:05:52.456 | INFO     | Core.Storage.NetworkXStorage:load_nx_graph:37 - Successfully loaded graph from: ./results/MySampleTexts/kg_graph/graph_storage_nx_data.graphml with 108 nodes and 72 edges
2025-05-30 21:05:52.456 | INFO     | __main__:setup_graphrag_context_for_orchestrator:79 - Orchestrator Test: Graph instance loaded. Node count: 108. Type: <class 'Core.Graph.ERGraph.ERGraph'>
2025-05-30 21:05:52.456 | INFO     | __main__:setup_graphrag_context_for_orchestrator:81 - Orchestrator Test: Type of graph_instance from factory: <class 'Core.Graph.ERGraph.ERGraph'>
2025-05-30 21:05:52.456 | INFO     | Core.Index.BaseIndex:load:16 - Attempting to load existing index from: ./results/MySampleTexts/kg_graph/entities_vdb
2025-05-30 21:05:52.456 | INFO     | Core.Index.FaissIndex:_load_index:234 - FaissIndex._load_index: Attempting to load index from persist_path: ./results/MySampleTexts/kg_graph/entities_vdb
2025-05-30 21:05:52.457 | INFO     | Core.Index.FaissIndex:_load_index:237 - FaissIndex._load_index: Set Settings.embed_model to: <class 'llama_index.embeddings.openai.base.OpenAIEmbedding'>
2025-05-30 21:05:52.457 | INFO     | Core.Index.FaissIndex:_load_index:242 - FaissIndex._load_index: Persist path ./results/MySampleTexts/kg_graph/entities_vdb confirmed to exist.
2025-05-30 21:05:52.457 | INFO     | Core.Index.FaissIndex:_load_index:243 - FaissIndex._load_index: Contents of persist_path: ['index_store.json', 'docstore.json', 'default__vector_store.json', 'image__vector_store.json', 'graph_store.json']
2025-05-30 21:05:52.462 | INFO     | Core.Index.FaissIndex:_load_index:247 - FaissIndex._load_index: Successfully called FaissVectorStore.from_persist_dir().
2025-05-30 21:05:52.462 | INFO     | Core.Index.FaissIndex:_load_index:248 - FaissIndex._load_index: Type of loaded vector_store: <class 'llama_index.vector_stores.faiss.base.FaissVectorStore'>
2025-05-30 21:05:52.462 | INFO     | Core.Index.FaissIndex:_load_index:251 - FaissIndex._load_index: Loaded vector_store has attribute _faiss_index.
2025-05-30 21:05:52.463 | INFO     | Core.Index.FaissIndex:_load_index:252 - FaissIndex._load_index: vector_store._faiss_index object: <faiss.swigfaiss_avx2.IndexHNSWFlat; proxy of <Swig Object of type 'faiss::IndexHNSWFlat *' at 0x7f5e1a583f30> >
2025-05-30 21:05:52.463 | INFO     | Core.Index.FaissIndex:_load_index:253 - FaissIndex._load_index: Loaded vector_store._faiss_index.ntotal: 108
2025-05-30 21:05:52.465 | INFO     | Core.Index.FaissIndex:_load_index:264 - FaissIndex._load_index: StorageContext created from defaults with loaded vector_store.
2025-05-30 21:05:52.578 | INFO     | Core.Index.FaissIndex:_load_index:271 - FaissIndex._load_index: Successfully loaded index from storage. Index object: <llama_index.core.indices.vector_store.base.VectorStoreIndex object at 0x7f5e1a5b9780>
2025-05-30 21:05:52.579 | INFO     | Core.Index.FaissIndex:_load_index:274 - FaissIndex._load_index: Index ID: 76756585-8f1b-482c-bd54-bbe56f6eebf9, Summary: None
2025-05-30 21:05:52.579 | INFO     | Core.Index.BaseIndex:load:20 - Successfully loaded existing index from: ./results/MySampleTexts/kg_graph/entities_vdb
2025-05-30 21:05:52.579 | INFO     | __main__:setup_graphrag_context_for_orchestrator:101 - Orchestrator Test: Entities VDB loaded successfully for context setup.
2025-05-30 21:05:52.579 | INFO     | __main__:setup_graphrag_context_for_orchestrator:128 - Orchestrator Test: GraphRAGContext created.
INFO [Config.default]: Loaded default config from Option/Config2.example.yaml
WARNING [Config.default]: Graph config not found in default YAMLs/data, creating default GraphConfig.
WARNING [Config.default]: Chunk config not found in default YAMLs/data, creating default ChunkConfig.
WARNING [Config.default]: Retriever config not found or invalid in default YAMLs/data, creating default RetrieverConfig.
WARNING [Config.default]: Query config (query_config) not found or invalid in default YAMLs/data, creating default QueryConfig.
INFO [Config.default]: Successfully created default Config instance.
Traceback (most recent call last):
  File "/home/brian/digimon/testing/test_agent_orchestrator.py", line 185, in <module>
    asyncio.run(main_orchestrator_test())
  File "/home/brian/miniconda3/envs/digimon/lib/python3.10/asyncio/runners.py", line 44, in run
    return loop.run_until_complete(main)
  File "/home/brian/miniconda3/envs/digimon/lib/python3.10/asyncio/base_events.py", line 649, in run_until_complete
    return future.result()
  File "/home/brian/digimon/testing/test_agent_orchestrator.py", line 144, in main_orchestrator_test
    vdb_search_step = ExecutionStep(
  File "/home/brian/miniconda3/envs/digimon/lib/python3.10/site-packages/pydantic/main.py", line 243, in __init__
    validated_self = self.__pydantic_validator__.validate_python(data, self_instance=self)
pydantic_core._pydantic_core.ValidationError: 2 validation errors for ExecutionStep
action.DynamicToolChainConfig
  Input should be a valid dictionary or instance of DynamicToolChainConfig [type=model_type, input_value=ToolCall(tool_id='Entity....ch with their scores.'}), input_type=ToolCall]
    For further information visit https://errors.pydantic.dev/2.11/v/model_type
action.PredefinedMethodConfig
  Input should be a valid dictionary or instance of PredefinedMethodConfig [type=model_type, input_value=ToolCall(tool_id='Entity....ch with their scores.'}), input_type=ToolCall]
    For further information visit https://errors.pydantic.dev/2.11/v/model_type
